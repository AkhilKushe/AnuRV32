$date
	Sun Oct  5 13:51:52 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module anu_core $end
$var wire 1 ! b_hbar_w $end
$var wire 1 " clk $end
$var wire 32 # data_in [31:0] $end
$var wire 32 $ data_out [31:0] $end
$var wire 32 % instr [31:0] $end
$var wire 32 & mem_addr [31:0] $end
$var wire 1 ' pc_mode0_w $end
$var wire 1 ( pc_mode1_w $end
$var wire 32 ) pc_o [31:0] $end
$var wire 1 * rst_n $end
$var wire 1 + sig_w $end
$var wire 1 , stall $end
$var wire 1 - wen_w $end
$var wire 1 . zero_w $end
$var wire 3 / uop_w [2:0] $end
$var wire 1 0 st $end
$var wire 1 1 sign_w $end
$var wire 1 2 shift_op $end
$var wire 5 3 rs2_w [4:0] $end
$var wire 5 4 rs1_w [4:0] $end
$var wire 5 5 rd_w [4:0] $end
$var wire 32 6 rd_data_w [31:0] $end
$var wire 32 7 pc_w [31:0] $end
$var wire 2 8 pc_mode_w [1:0] $end
$var wire 32 9 pc_imm_w [31:0] $end
$var wire 32 : op2_w [31:0] $end
$var wire 32 ; op2_imm_w [31:0] $end
$var wire 32 < op1_w [31:0] $end
$var wire 32 = op1_pc_w [31:0] $end
$var wire 1 > lui $end
$var wire 1 ? ld $end
$var wire 1 @ jalr $end
$var wire 1 A jal $end
$var wire 32 B imm_w [31:0] $end
$var wire 1 C i_frame $end
$var wire 1 D f7_w $end
$var wire 32 E extended_data_in [31:0] $end
$var wire 32 F data_wb_w [31:0] $end
$var wire 16 G ctrlSig_w [15:0] $end
$var wire 1 H bypass_w $end
$var wire 1 I branch_op $end
$var wire 1 J auipc $end
$var wire 32 K alu_out_w [31:0] $end
$var wire 32 L alu_out_imm_w [31:0] $end
$var wire 1 M alu_op $end
$var reg 3 N alu_uop_r [2:0] $end
$var reg 1 O branch_r $end
$var reg 32 P data_wb_r [31:0] $end
$var reg 2 Q mem_access_mode [1:0] $end
$var reg 2 R mem_access_mode_r [1:0] $end
$var reg 5 S rd_r [4:0] $end
$var reg 1 T valid_f7_r $end
$var reg 1 U wen_r $end
$scope module alu_inst $end
$var wire 1 T f7 $end
$var wire 32 V op1 [31:0] $end
$var wire 32 W op2 [31:0] $end
$var wire 1 * rst_n $end
$var wire 3 X uop [2:0] $end
$var wire 1 . zero $end
$var wire 32 Y SR_unsigned [31:0] $end
$var wire 32 Z SR_signed [31:0] $end
$var reg 32 [ out [31:0] $end
$upscope $end
$scope module ext32 $end
$var wire 1 ! b_hbar $end
$var wire 1 H bypass $end
$var wire 32 \ data_in [31:0] $end
$var wire 1 + sig $end
$var wire 32 ] z_extend8_w [31:0] $end
$var wire 32 ^ z_extend16_w [31:0] $end
$var wire 32 _ s_extend8_w [31:0] $end
$var wire 32 ` s_extend16_w [31:0] $end
$var reg 32 a data_out [31:0] $end
$scope module sE16 $end
$var wire 16 b data_in [15:0] $end
$var wire 32 c data_out [31:0] $end
$upscope $end
$scope module sE8 $end
$var wire 8 d data_in [7:0] $end
$var wire 32 e data_out [31:0] $end
$upscope $end
$scope module zE16 $end
$var wire 16 f data_in [15:0] $end
$var wire 32 g data_out [31:0] $end
$upscope $end
$scope module zE8 $end
$var wire 8 h data_in [7:0] $end
$var wire 32 i data_out [31:0] $end
$upscope $end
$upscope $end
$scope module instr_decode_inst $end
$var wire 32 j instr [31:0] $end
$var wire 1 * rst_n $end
$var wire 5 k rs2 [4:0] $end
$var wire 5 l rs1 [4:0] $end
$var wire 5 m rd [4:0] $end
$var wire 7 n opcode [6:0] $end
$var wire 32 o imm [31:0] $end
$var wire 1 D f7 $end
$var wire 16 p ctrlSig [15:0] $end
$var wire 3 q alu_uop [2:0] $end
$scope module extract_imm_inst $end
$var wire 32 r instr [31:0] $end
$var wire 1 * rst_n $end
$var wire 16 s ctrlSig [15:0] $end
$var reg 32 t imm [31:0] $end
$upscope $end
$scope module uCode $end
$var wire 3 u alu_uop [2:0] $end
$var wire 16 v ctrlSig [15:0] $end
$var wire 7 w opcode [6:0] $end
$var wire 1 x shift_op $end
$var reg 16 y ctrlSig_t [15:0] $end
$upscope $end
$upscope $end
$scope module pc $end
$var wire 1 " clk $end
$var wire 32 z imm [31:0] $end
$var wire 2 { mode [1:0] $end
$var wire 1 * rst_n $end
$var reg 32 | pc_o [31:0] $end
$var reg 32 } pc_r [31:0] $end
$upscope $end
$scope module register_file_inst $end
$var event 1 ~ _ivl_2 $end
$var wire 5 !" rd [4:0] $end
$var wire 32 "" rd_data [31:0] $end
$var wire 1 #" ren $end
$var wire 5 $" rs1 [4:0] $end
$var wire 5 %" rs2 [4:0] $end
$var wire 1 * rst_n $end
$var wire 1 U wen $end
$var reg 32 &" o1 [31:0] $end
$var reg 32 '" o2 [31:0] $end
$scope begin register_file[0] $end
$upscope $end
$scope begin register_file[1] $end
$upscope $end
$scope begin register_file[2] $end
$upscope $end
$scope begin register_file[3] $end
$upscope $end
$scope begin register_file[4] $end
$upscope $end
$scope begin register_file[5] $end
$upscope $end
$scope begin register_file[6] $end
$upscope $end
$scope begin register_file[7] $end
$upscope $end
$scope begin register_file[8] $end
$upscope $end
$scope begin register_file[9] $end
$upscope $end
$scope begin register_file[10] $end
$upscope $end
$scope begin register_file[11] $end
$upscope $end
$scope begin register_file[12] $end
$upscope $end
$scope begin register_file[13] $end
$upscope $end
$scope begin register_file[14] $end
$upscope $end
$scope begin register_file[15] $end
$upscope $end
$scope begin register_file[16] $end
$upscope $end
$scope begin register_file[17] $end
$upscope $end
$scope begin register_file[18] $end
$upscope $end
$scope begin register_file[19] $end
$upscope $end
$scope begin register_file[20] $end
$upscope $end
$scope begin register_file[21] $end
$upscope $end
$scope begin register_file[22] $end
$upscope $end
$scope begin register_file[23] $end
$upscope $end
$scope begin register_file[24] $end
$upscope $end
$scope begin register_file[25] $end
$upscope $end
$scope begin register_file[26] $end
$upscope $end
$scope begin register_file[27] $end
$upscope $end
$scope begin register_file[28] $end
$upscope $end
$scope begin register_file[29] $end
$upscope $end
$scope begin register_file[30] $end
$upscope $end
$scope begin register_file[31] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx '"
bx &"
bz %"
bz $"
1#"
bx ""
bx !"
1~
bx }
bx |
bx {
bx z
bx y
xx
bz w
bx v
bz u
b0 t
bx s
bz r
bz q
bx p
b0 o
bz n
bz m
bz l
bz k
bz j
b0zzzzzzzz i
bz h
b0zzzzzzzzzzzzzzzz g
bz f
bz e
bz d
bz c
bz b
b0zzzzzzzzzzzzzzzz a
bz `
bz _
b0zzzzzzzzzzzzzzzz ^
b0zzzzzzzz ]
bz \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
xT
bx S
b0 R
bx Q
bx P
0O
bx N
xM
bx L
bx K
xJ
xI
zH
bx G
bx F
b0zzzzzzzzzzzzzzzz E
zD
xC
b0 B
xA
x@
x?
x>
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bz 5
bz 4
bz 3
x2
z1
x0
bz /
x.
x-
z,
z+
z*
bx )
x(
x'
bx &
bz %
bx $
bz #
z"
z!
$end
#1
