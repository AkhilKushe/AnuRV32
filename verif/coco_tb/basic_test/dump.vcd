$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
  $var wire 1 # stall $end
  $var wire 32 $ instr [31:0] $end
  $var wire 32 % data_in [31:0] $end
  $var wire 1 & rst_n $end
  $var wire 1 ' clk $end
  $var wire 32 ( pc_o [31:0] $end
  $var wire 32 ) data_out [31:0] $end
  $var wire 32 * mem_addr [31:0] $end
  $var wire 2 + mem_access_mode [1:0] $end
 $upscope $end
 $scope module anu_core $end
  $var wire 1 , stall $end
  $var wire 32 - instr [31:0] $end
  $var wire 32 . data_in [31:0] $end
  $var wire 1 / rst_n $end
  $var wire 1 0 clk $end
  $var wire 32 1 pc_o [31:0] $end
  $var wire 32 2 data_out [31:0] $end
  $var wire 32 3 mem_addr [31:0] $end
  $var wire 2 4 mem_access_mode [1:0] $end
  $var wire 5 5 rs1_w [4:0] $end
  $var wire 5 6 rs2_w [4:0] $end
  $var wire 5 7 rd_w [4:0] $end
  $var wire 5 8 rd_r [4:0] $end
  $var wire 32 9 imm_w [31:0] $end
  $var wire 32 : op1_w [31:0] $end
  $var wire 32 ; op1_pc_w [31:0] $end
  $var wire 32 < op2_imm_w [31:0] $end
  $var wire 32 = op2_w [31:0] $end
  $var wire 3 > uop_w [2:0] $end
  $var wire 3 ? alu_uop_r [2:0] $end
  $var wire 1 @ f7_w $end
  $var wire 1 A valid_f7_r $end
  $var wire 1 B wen_w $end
  $var wire 1 C wen_r $end
  $var wire 1 D branch_r $end
  $var wire 1 E zero_w $end
  $var wire 16 F ctrlSig_w [15:0] $end
  $var wire 32 G extended_data_in [31:0] $end
  $var wire 32 H alu_out_w [31:0] $end
  $var wire 32 I alu_out_imm_w [31:0] $end
  $var wire 32 J data_wb_w [31:0] $end
  $var wire 32 K data_wb_r [31:0] $end
  $var wire 32 L rd_data_w [31:0] $end
  $var wire 2 M mem_access_mode_r [1:0] $end
  $var wire 1 N b_hbar_w $end
  $var wire 1 O bypass_w $end
  $var wire 1 P sig_w $end
  $var wire 1 Q pc_mode0_w $end
  $var wire 1 R pc_mode1_w $end
  $var wire 32 S pc_imm_w [31:0] $end
  $var wire 2 T pc_mode_w [1:0] $end
  $var wire 32 U pc_w [31:0] $end
  $var wire 1 V alu_op $end
  $var wire 1 W i_frame $end
  $var wire 1 X shift_op $end
  $var wire 1 Y ld $end
  $var wire 1 Z st $end
  $var wire 1 [ branch_op $end
  $var wire 1 \ jalr $end
  $var wire 1 ] jal $end
  $var wire 1 ^ auipc $end
  $var wire 1 _ lui $end
  $var wire 1 ` sign_w $end
  $scope module alu_inst $end
   $var wire 32 a op1 [31:0] $end
   $var wire 32 b op2 [31:0] $end
   $var wire 3 c uop [2:0] $end
   $var wire 1 d f7 $end
   $var wire 1 e rst_n $end
   $var wire 32 f out [31:0] $end
   $var wire 1 g zero $end
   $var wire 3 _! ADD_SUB [2:0] $end
   $var wire 3 `! AND [2:0] $end
   $var wire 3 a! OR [2:0] $end
   $var wire 3 b! XOR [2:0] $end
   $var wire 3 c! SL [2:0] $end
   $var wire 3 d! SR [2:0] $end
   $var wire 3 e! SLT [2:0] $end
   $var wire 3 f! SLTU [2:0] $end
   $var wire 32 h SR_signed [31:0] $end
   $var wire 32 i SR_unsigned [31:0] $end
  $upscope $end
  $scope module ext32 $end
   $var wire 32 j data_in [31:0] $end
   $var wire 1 k sig $end
   $var wire 1 l b_hbar $end
   $var wire 1 m bypass $end
   $var wire 32 n data_out [31:0] $end
   $var wire 32 o z_extend8_w [31:0] $end
   $var wire 32 p z_extend16_w [31:0] $end
   $var wire 32 q s_extend8_w [31:0] $end
   $var wire 32 r s_extend16_w [31:0] $end
   $scope module sE16 $end
    $var wire 32 g! WIDTH [31:0] $end
    $var wire 16 s data_in [15:0] $end
    $var wire 32 t data_out [31:0] $end
   $upscope $end
   $scope module sE8 $end
    $var wire 32 h! WIDTH [31:0] $end
    $var wire 8 u data_in [7:0] $end
    $var wire 32 v data_out [31:0] $end
   $upscope $end
   $scope module zE16 $end
    $var wire 32 g! WIDTH [31:0] $end
    $var wire 16 w data_in [15:0] $end
    $var wire 32 x data_out [31:0] $end
   $upscope $end
   $scope module zE8 $end
    $var wire 32 h! WIDTH [31:0] $end
    $var wire 8 y data_in [7:0] $end
    $var wire 32 z data_out [31:0] $end
   $upscope $end
  $upscope $end
  $scope module instr_decode_inst $end
   $var wire 32 { instr [31:0] $end
   $var wire 1 | rst_n $end
   $var wire 5 } rs1 [4:0] $end
   $var wire 5 ~ rs2 [4:0] $end
   $var wire 5 !! rd [4:0] $end
   $var wire 3 "! alu_uop [2:0] $end
   $var wire 7 #! opcode [6:0] $end
   $var wire 32 $! imm [31:0] $end
   $var wire 1 %! f7 $end
   $var wire 16 &! ctrlSig [15:0] $end
   $scope module extract_imm_inst $end
    $var wire 16 '! ctrlSig [15:0] $end
    $var wire 32 (! instr [31:0] $end
    $var wire 1 )! rst_n $end
    $var wire 32 *! imm [31:0] $end
   $upscope $end
   $scope module uCode $end
    $var wire 7 +! opcode [6:0] $end
    $var wire 3 ,! alu_uop [2:0] $end
    $var wire 16 -! ctrlSig [15:0] $end
    $var wire 16 .! ctrlSig_t [15:0] $end
    $var wire 1 /! shift_op $end
   $upscope $end
  $upscope $end
  $scope module pc $end
   $var wire 1 0! clk $end
   $var wire 1 1! rst_n $end
   $var wire 2 2! mode [1:0] $end
   $var wire 32 3! imm [31:0] $end
   $var wire 32 4! pc_o [31:0] $end
   $var wire 2 i! STALL [1:0] $end
   $var wire 2 j! INCR [1:0] $end
   $var wire 2 k! BRANCH [1:0] $end
   $var wire 2 l! JALR [1:0] $end
   $var wire 32 5! pc_r [31:0] $end
  $upscope $end
  $scope module register_file_inst $end
   $var wire 32 6! rd_data [31:0] $end
   $var wire 5 7! rs1 [4:0] $end
   $var wire 5 8! rs2 [4:0] $end
   $var wire 5 9! rd [4:0] $end
   $var wire 1 :! wen $end
   $var wire 1 ;! ren $end
   $var wire 1 <! rst_n $end
   $var wire 32 =! o1 [31:0] $end
   $var wire 32 >! o2 [31:0] $end
   $var wire 32 ?! reg_mem[0] [31:0] $end
   $var wire 32 @! reg_mem[1] [31:0] $end
   $var wire 32 A! reg_mem[2] [31:0] $end
   $var wire 32 B! reg_mem[3] [31:0] $end
   $var wire 32 C! reg_mem[4] [31:0] $end
   $var wire 32 D! reg_mem[5] [31:0] $end
   $var wire 32 E! reg_mem[6] [31:0] $end
   $var wire 32 F! reg_mem[7] [31:0] $end
   $var wire 32 G! reg_mem[8] [31:0] $end
   $var wire 32 H! reg_mem[9] [31:0] $end
   $var wire 32 I! reg_mem[10] [31:0] $end
   $var wire 32 J! reg_mem[11] [31:0] $end
   $var wire 32 K! reg_mem[12] [31:0] $end
   $var wire 32 L! reg_mem[13] [31:0] $end
   $var wire 32 M! reg_mem[14] [31:0] $end
   $var wire 32 N! reg_mem[15] [31:0] $end
   $var wire 32 O! reg_mem[16] [31:0] $end
   $var wire 32 P! reg_mem[17] [31:0] $end
   $var wire 32 Q! reg_mem[18] [31:0] $end
   $var wire 32 R! reg_mem[19] [31:0] $end
   $var wire 32 S! reg_mem[20] [31:0] $end
   $var wire 32 T! reg_mem[21] [31:0] $end
   $var wire 32 U! reg_mem[22] [31:0] $end
   $var wire 32 V! reg_mem[23] [31:0] $end
   $var wire 32 W! reg_mem[24] [31:0] $end
   $var wire 32 X! reg_mem[25] [31:0] $end
   $var wire 32 Y! reg_mem[26] [31:0] $end
   $var wire 32 Z! reg_mem[27] [31:0] $end
   $var wire 32 [! reg_mem[28] [31:0] $end
   $var wire 32 \! reg_mem[29] [31:0] $end
   $var wire 32 ]! reg_mem[30] [31:0] $end
   $var wire 32 ^! reg_mem[31] [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
1&
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00 +
0,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
1/
00
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00 4
b00000 5
b00000 6
b00000 7
b00000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b000 >
b000 ?
0@
0A
1B
0C
0D
1E
b0000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00 M
1N
0O
0P
1Q
0R
b00000000000000000000000000000000 S
b01 T
b00000000000000000000000000000000 U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b000 c
0d
1e
b00000000000000000000000000000000 f
1g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
0k
1l
0m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b0000000000000000 s
b00000000000000000000000000000000 t
b00000000 u
b00000000000000000000000000000000 v
b0000000000000000 w
b00000000000000000000000000000000 x
b00000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
1|
b00000 }
b00000 ~
b00000 !!
b000 "!
b0000000 #!
b00000000000000000000000000000000 $!
0%!
b0000000000000000 &!
b0000000000000000 '!
b00000000000000000000000000000000 (!
1)!
b00000000000000000000000000000000 *!
b0000000 +!
b000 ,!
b0000000000000000 -!
b0000000000000000 .!
0/!
00!
11!
b01 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000100 5!
b00000000000000000000000000000000 6!
b00000 7!
b00000 8!
b00000 9!
0:!
1;!
1<!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 T!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
b000 _!
b111 `!
b110 a!
b100 b!
b001 c!
b101 d!
b010 e!
b011 f!
b00000000000000000000000000010000 g!
b00000000000000000000000000001000 h!
b00 i!
b01 j!
b11 k!
b10 l!
#100001
